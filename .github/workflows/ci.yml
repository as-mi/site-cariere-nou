name: ci

run-name: Continuous integration

on: [push]

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up Node.js and npm
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies using npm
        run: npm ci

      - name: Check the formatting
        run: npm run format:check

      - name: Run the linter
        run: npm run lint

  unit_tests:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up Node.js and npm
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies using npm
        run: npm ci

      - name: Run unit tests using Jest
        run: npm run test:ci

  # Based on https://playwright.dev/docs/ci#github-actions
  e2e_tests:
    runs-on: ubuntu-latest
    container:
      # Use the official Playwright container image
      # in order to avoid the need to install dependencies
      image: mcr.microsoft.com/playwright:v1.30.0-focal
    services:
      postgres:
        image: postgres:15.1
        env:
          POSTGRES_PASSWORD: ci
          POSTGRES_DB: cariere
        # Set health checks to wait until the DB has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      DATABASE_URL: postgresql://postgres:ci@postgres:5432/cariere?schema=public
      # Don't try to actually deliver e-mails in CI
      MAILER_DISABLE_EMAIL_SENDING: 1
    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up Node.js and npm
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies using npm
        run: npm ci

      # Based on https://nextjs.org/docs/advanced-features/ci-build-caching#github-actions
      - name: Cache Next.js build data
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - run: ls -l .next

      - name: Build production version of the app
        run: npm run build

      - name: Run migrations to set up database
        run: npx prisma migrate deploy

      - name: Run end-to-end tests using Playwright
        run: npm run test:e2e
