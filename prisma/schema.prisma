// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SettingValue {
  key   String @id
  value Json
}

enum EventKind {
  WORKSHOP
  PRESENTATION
}

model Event {
  id               Int       @id @default(autoincrement())
  name             String
  kind             EventKind
  location         String    @default("")
  date             DateTime  @db.Date
  time             String    @default("")
  facebookEventUrl String    @default("")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum Role {
  ADMIN
  PARTICIPANT
  RECRUITER
}

model User {
  id                          Int                                 @id @default(autoincrement())
  name                        String
  email                       String                              @unique
  emailVerified               DateTime?
  emailVerificationToken      String?
  passwordHash                String?
  passwordResetToken          String?
  role                        Role
  createdAt                   DateTime                            @default(now())
  updatedAt                   DateTime                            @updatedAt
  consentApplyToOtherPartners Boolean                             @default(false)
  accounts                    Account[]
  profile                     Profile?
  resumes                     Resume[]
  applications                ParticipantApplyToPosition[]
  answers                     ParticipantAnswersToTechnicalTest[]
  startedTechnicalTests       ParticipantStartTechnicalTest[]
}

model Profile {
  user        User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId      Int    @id
  phoneNumber String
}

enum PackageType {
  PLATINUM
  GOLD
  SILVER
  BRONZE
}

model Company {
  id                   Int         @id @default(autoincrement())
  name                 String
  slug                 String      @unique
  siteUrl              String
  packageType          PackageType
  logo                 Image       @relation(fields: [logoImageId], references: [id])
  logoImageId          Int         @unique
  description          String
  positionsExternalUrl String?
  positions            Position[]
  facebookUrl          String      @default("")
  instagramUrl         String      @default("")
  linkedinUrl          String      @default("")
  thisYearPartner      Boolean     @default(true)
}

model Image {
  id            Int      @id @default(autoincrement())
  fileName      String
  contentType   String
  width         Int
  height        Int
  data          Bytes
  parentCompany Company?
}

model Resume {
  id           Int                          @id @default(autoincrement())
  userId       Int
  user         User                         @relation(fields: [userId], references: [id], onDelete: Cascade)
  fileName     String
  contentType  String
  data         Bytes
  applications ParticipantApplyToPosition[]
}

model Position {
  id                       Int                          @id @default(autoincrement())
  companyId                Int
  company                  Company                      @relation(fields: [companyId], references: [id])
  title                    String
  order                    Int?
  category                 String
  requiredSkills           String
  workSchedule             String
  workModel                String
  duration                 String
  description              String
  applications             ParticipantApplyToPosition[]
  technicalTests           TechnicalTest[]              @relation("TechnicalTests")
  activeTechnicalTestId    Int?                         @unique
  activeTechnicalTest      TechnicalTest?               @relation("ActiveTechnicalTest", fields: [activeTechnicalTestId], references: [id])
  technicalTestIsMandatory Boolean                      @default(true)
}

model ParticipantApplyToPosition {
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  positionId Int
  position   Position @relation(fields: [positionId], references: [id], onDelete: Cascade)

  resumeId Int
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@id([userId, positionId])
}

model TechnicalTest {
  id Int @id @default(autoincrement())

  positionId Int
  position   Position @relation("TechnicalTests", fields: [positionId], references: [id], onDelete: Cascade)

  title       String
  description String

  questions Json

  participantAnswers ParticipantAnswersToTechnicalTest[]
  participantStarts  ParticipantStartTechnicalTest[]
  activePosition     Position?                           @relation("ActiveTechnicalTest")
}

model ParticipantStartTechnicalTest {
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  technicalTestId Int
  technicalTest   TechnicalTest @relation(fields: [technicalTestId], references: [id], onDelete: Cascade)

  startTime DateTime @default(now())

  @@id([userId, technicalTestId])
}

model ParticipantAnswersToTechnicalTest {
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  technicalTestId Int
  technicalTest   TechnicalTest @relation(fields: [technicalTestId], references: [id], onDelete: Cascade)

  answers Json

  createdAt DateTime @default(now())

  @@id([userId, technicalTestId])
}
